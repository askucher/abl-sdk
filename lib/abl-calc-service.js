// Generated by LiveScript 1.3.1
(function(){
  angular.module('ablsdk').service('ablcalc', function($http){
    var sum;
    sum = function(arr){
      switch (false) {
      case typeof arr !== 'undefined':
        return 0;
      case typeof arr !== null:
        return 0;
      case arr.length !== 0:
        return 0;
      default:
        return arr.reduce(function(x, y){
          return x + y;
        });
      }
    };
    return function(charges){
      var makeEditable, byPrice, state, calcSubtotal, calcTaxFee, calcTaxesFees, showPrice, calcPrice, showAddonPrice, calcAddonPrice, totalAddons, calcCoupon, calcTotal, coupon;
      makeEditable = function(charge){
        var ref$;
        return {
          name: charge.name,
          quantity: (ref$ = charge.count) != null ? ref$ : 0,
          amount: charge.amount,
          _id: charge._id
        };
      };
      byPrice = function(a, b){
        return b.amount - a.amount;
      };
      state = {
        attendees: charges.filter(function(it){
          return it.type === 'aap';
        }).map(makeEditable).sort(byPrice),
        addons: charges.filter(function(it){
          return it.type === 'addon';
        }).map(makeEditable)
      };
      calcSubtotal = function(){
        return sum(
        state.attendees.map(calcPrice)) + totalAddons();
      };
      calcTaxFee = function(charge){
        switch (false) {
        case charge.type !== 'tax':
          return calcSubtotal() / 100 * charge.amount;
        case charge.type !== 'fee':
          return sum(
          state.attendees.map(function(it){
            return it.quantity;
          })) * charge.amount;
        default:
          return 0;
        }
      };
      calcTaxesFees = function(){
        return sum(
        charges.map(calcTaxFee));
      };
      showPrice = function(attendee){
        var ref$, ref1$, ref2$;
        return (ref$ = (ref1$ = charges.filter(function(it){
          return it.type === 'aap' && it.name === attendee.name;
        })) != null ? (ref2$ = ref1$[0]) != null ? ref2$.amount : void 8 : void 8) != null ? ref$ : 0;
      };
      calcPrice = function(attendee){
        return showPrice(attendee) * attendee.quantity;
      };
      showAddonPrice = function(addon){
        return sum(
        state.addons.filter(function(it){
          return it.name === addon.name;
        }).map(function(it){
          return it.amount;
        }));
      };
      calcAddonPrice = function(addon){
        return showAddonPrice(addon) * addon.quantity;
      };
      totalAddons = function(){
        return sum(
        state.addons.map(calcAddonPrice));
      };
      calcCoupon = function(){
        var subtotal, amountOff, _;
        subtotal = calcSubtotal();
        amountOff = function(){
          switch (false) {
          case !(coupon.codes[0].amountOff < subtotal):
            return coupon.codes[0].amountOff;
          default:
            return subtotal;
          }
        };
        _ = (function(){
          switch (false) {
          case coupon.codes.length !== 0:
            return 0;
          case coupon.codes[0].amountOff == null:
            return amountOff();
          case coupon.codes[0].percentOff == null:
            return subtotal / 100 * coupon.codes[0].percentOff;
          default:
            return 0;
          }
        }());
        return _;
      };
      calcTotal = function(){
        return calcSubtotal() + calcTaxesFees() - calcCoupon();
      };
      coupon = {
        codes: [],
        calc: calcCoupon,
        remove: function(c){
          var index;
          index = coupon.codes.indexOf(c);
          if (index > -1) {
            return coupon.codes.splice(index, 1);
          }
        },
        add: function(activity){
          var ref$, apply;
          if (((ref$ = coupon.code) != null ? ref$ : "").length === 0) {
            return;
          }
          coupon.error = "";
          apply = function(data){
            if (moment().diff(moment(data.redeemBy), 'minutes')) {
              coupon.error = "This coupon is expired";
            }
            if (data.activities.length > 0 && data.activities[0] !== activity) {
              return coupon.error = "This coupon is not valid for this activity.";
            } else {
              coupon.codes.push(data);
              return coupon.code = "";
            }
          };
          return $http.get("api/v1/coupon/" + coupon.code).success(function(data){
            return apply(data);
          }).error(function(data){
            var ref$, ref1$;
            return coupon.error = (ref$ = data != null ? (ref1$ = data.errors) != null ? ref1$[0] : void 8 : void 8) != null ? ref$ : "Coupon not found";
          });
        },
        code: ""
      };
      return {
        coupon: coupon,
        addons: state.addons,
        attendees: state.attendees,
        totalWithoutTaxesfees: calcSubtotal,
        calcCoupon: calcCoupon,
        calcTaxFee: calcTaxFee,
        calcTaxesFees: calcTaxesFees,
        showPrice: showPrice,
        calcPrice: calcPrice,
        showAddonPrice: showAddonPrice,
        calcAddonPrice: calcAddonPrice,
        totalAddons: totalAddons,
        calcSubtotal: calcSubtotal,
        calcTotal: calcTotal
      };
    };
  });
}).call(this);
