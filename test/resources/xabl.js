// Generated by LiveScript 1.4.0
(function(){
  var slice$ = [].slice;
  angular.module('test').service('$xabl', function($http){
    var ENV, appliedOptions, apiUrl, req;
    ENV = {
      apiUrl: 'https://staging-api.adventurebucketlist.com/'
    };
    appliedOptions = {
      key: "475e2a00b7f6cb4008bbe0b98df460c82d19d83d7c55eb36f5001b78d414ff6374ea7d2360f3c3bd1988f82c109f6d569273611fddc753ad263b6d9d7482c4d3",
      secure: false
    };
    apiUrl = ENV.apiUrl;
    req = curry$(function(method, request, data){
      var json, timestamp, post, toBase64, sha256, encode, headers, finalHeaders, ref$, url;
      json = (function(){
        switch (false) {
        case method !== 'GET':
          return "";
        default:
          return JSON.stringify(data);
        }
      }());
      timestamp = Date.parse(new Date().toISOString());
      post = (function(){
        switch (false) {
        case method !== 'GET':
          return null;
        default:
          return data;
        }
      }());
      toBase64 = function(input){
        return input;
      };
      sha256 = function(input){
        return input;
      };
      encode = compose$(toBase64, sha256);
      headers = (function(){
        switch (false) {
        case !appliedOptions.secure:
          return {
            "X-ABL-Access-Key": appliedOptions.key,
            "X-ABL-Signature": encode(timestamp + "" + apiUrl + request + json),
            "X-ABL-Date": timestamp
          };
        default:
          return {
            "X-ABL-Access-Key": appliedOptions.key,
            "X-ABL-Date": timestamp
          };
        }
      }());
      finalHeaders = angular.extend((ref$ = data != null ? data._customHeaders : void 8) != null
        ? ref$
        : {}, headers);
      if (data != null) {
        delete data._customHeaders;
      }
      url = (function(){
        switch (false) {
        case !appliedOptions.secure:
          return 'endpoint';
        default:
          return apiUrl + "api/v1/" + request;
        }
      }());
      return $http({
        method: method,
        url: url,
        headers: finalHeaders,
        data: post
      });
    });
    return {
      options: appliedOptions,
      setup: function(options){
        appliedOptions.key = options.key;
        return appliedOptions.secure = options.secure;
      },
      post: req('POST'),
      get: partialize$.apply(this, [req, ['GET', void 8, null], [1]])
    };
  });
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function partialize$(f, args, where){
    var context = this;
    return function(){
      var params = slice$.call(arguments), i,
          len = params.length, wlen = where.length,
          ta = args ? args.concat() : [], tw = where ? where.concat() : [];
      for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
      return len < wlen && len ?
        partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
    };
  }
}).call(this);
